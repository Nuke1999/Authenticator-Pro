{"version":3,"file":"content.js","mappingssources":["webpack:///./src/content.js"],"sourcesContent":["// const { authenticator } = require(\"otplib\");\r\n// const { Buffer } = require(\"buffer\");\r\n\r\n// window.Buffer = Buffer;\r\n\r\n// console.log(\"content.js loaded\");\r\n\r\n// (function () {\r\n//   let extensionContextInvalidated = false;\r\n\r\n//   function autoFillAuthInputs(token) {\r\n//     const inputs = document.querySelectorAll('input[type=\"text\"]');\r\n//     console.log(\"Found inputs:\", inputs);\r\n\r\n//     inputs.forEach((input) => {\r\n//       if (input.id.includes(\"auth\")) {\r\n//         console.log(\"Pasting token into input with id:\", input.id);\r\n//         input.value = token;\r\n\r\n//         // Simulate user interaction\r\n//         input.focus();\r\n//         const inputEvent = new Event(\"input\", { bubbles: true });\r\n//         input.dispatchEvent(inputEvent);\r\n\r\n//         const changeEvent = new Event(\"change\", { bubbles: true });\r\n//         input.dispatchEvent(changeEvent);\r\n\r\n//         input.blur();\r\n//       }\r\n//     });\r\n//   }\r\n\r\n//   function checkAndFillAuthInputs() {\r\n//     chrome.runtime.sendMessage({ type: \"GET_TAB_URL\" }, (response) => {\r\n//       const currentTabUrl = response.url;\r\n//       console.log(\"Current tab URL:\", currentTabUrl);\r\n\r\n//       chrome.storage.local.get([\"tokens\", \"autofillEnabled\"], (result) => {\r\n//         console.log(\"chrome.storage.local content:\", result);\r\n//         if (result.autofillEnabled) {\r\n//           const tokens = result.tokens || [];\r\n//           tokens.forEach((tokenObj) => {\r\n//             const savedUrl = tokenObj.url; // Directly access the URL from the token object\r\n//             if (savedUrl == currentTabUrl) {\r\n//               console.log(\"condition to fill token met\");\r\n//               const otp = authenticator.generate(tokenObj.secret); // Generate OTP\r\n//               autoFillAuthInputs(otp);\r\n//             }\r\n//           });\r\n//         } else {\r\n//           console.log(\"Autofill is disabled.\");\r\n//         }\r\n//       });\r\n//     });\r\n//   }\r\n\r\n//   function onDOMContentLoaded() {\r\n//     try {\r\n//       checkAndFillAuthInputs();\r\n\r\n//       const intervalId = setInterval(() => {\r\n//         if (extensionContextInvalidated) {\r\n//           clearInterval(intervalId);\r\n//           return;\r\n//         }\r\n//         try {\r\n//           checkAndFillAuthInputs();\r\n//         } catch (error) {\r\n//           console.log(\"Error accessing chrome.storage.local:\", error);\r\n//           extensionContextInvalidated = true;\r\n//           clearInterval(intervalId);\r\n//         }\r\n//       }, 3000);\r\n\r\n//       window.addEventListener(\"unload\", () => clearInterval(intervalId));\r\n//     } catch (error) {\r\n//       console.log(\"Error initializing content script:\", error);\r\n//     }\r\n//   }\r\n\r\n//   if (document.readyState === \"loading\") {\r\n//     document.addEventListener(\"DOMContentLoaded\", onDOMContentLoaded);\r\n//   } else {\r\n//     onDOMContentLoaded();\r\n//   }\r\n// })();\r\n\r\n// const { Buffer } = require(\"buffer\");\r\n\r\n// window.Buffer = Buffer;\r\n\r\n// console.log(\"content.js loaded\");\r\n\r\n// (function () {\r\n//   let extensionContextInvalidated = false;\r\n\r\n//   function autoFillAuthInputs(token) {\r\n//     const inputs = document.querySelectorAll('input[type=\"text\"]');\r\n//     console.log(\"Found inputs:\", inputs);\r\n\r\n//     inputs.forEach((input) => {\r\n//       if (input.id.includes(\"auth\")) {\r\n//         console.log(\"Pasting token into input with id:\", input.id);\r\n//         input.value = token;\r\n\r\n//         // Simulate user interaction\r\n//         input.focus();\r\n//         const inputEvent = new Event(\"input\", { bubbles: true });\r\n//         input.dispatchEvent(inputEvent);\r\n\r\n//         const changeEvent = new Event(\"change\", { bubbles: true });\r\n//         input.dispatchEvent(changeEvent);\r\n\r\n//         input.blur();\r\n//       }\r\n//     });\r\n//   }\r\n\r\n//   function checkAndFillAuthInputs() {\r\n//     chrome.runtime.sendMessage({ type: \"GET_TAB_URL\" }, (response) => {\r\n//       const currentTabUrl = response.url;\r\n//       if (!currentTabUrl) {\r\n//         console.log(\"Current tab URL not found.\");\r\n//         return;\r\n//       }\r\n//       console.log(\"Current tab URL:\", currentTabUrl);\r\n\r\n//       chrome.storage.local.get(\r\n//         [\"tokens\", \"autofillEnabled\", \"lastToken\"],\r\n//         (result) => {\r\n//           console.log(\"chrome.storage.local content:\", result);\r\n//           if (result.autofillEnabled) {\r\n//             const tokens = result.tokens || [];\r\n//             const lastToken = result.lastToken || \"\";\r\n//             tokens.forEach((tokenObj) => {\r\n//               const savedUrl = tokenObj.url; // Directly access the URL from the token object\r\n//               if (savedUrl && currentTabUrl.includes(savedUrl)) {\r\n//                 console.log(\"condition to fill token met\");\r\n//                 autoFillAuthInputs(lastToken); // Use the stored OTP\r\n//               }\r\n//             });\r\n//           } else {\r\n//             console.log(\"Autofill is disabled.\");\r\n//           }\r\n//         }\r\n//       );\r\n//     });\r\n//   }\r\n\r\n//   function onDOMContentLoaded() {\r\n//     try {\r\n//       checkAndFillAuthInputs();\r\n\r\n//       const intervalId = setInterval(() => {\r\n//         if (extensionContextInvalidated) {\r\n//           clearInterval(intervalId);\r\n//           return;\r\n//         }\r\n//         try {\r\n//           checkAndFillAuthInputs();\r\n//         } catch (error) {\r\n//           console.log(\"Error accessing chrome.storage.local:\", error);\r\n//           extensionContextInvalidated = true;\r\n//           clearInterval(intervalId);\r\n//         }\r\n//       }, 3000);\r\n\r\n//       window.addEventListener(\"unload\", () => clearInterval(intervalId));\r\n//     } catch (error) {\r\n//       console.log(\"Error initializing content script:\", error);\r\n//     }\r\n//   }\r\n\r\n//   if (document.readyState === \"loading\") {\r\n//     document.addEventListener(\"DOMContentLoaded\", onDOMContentLoaded);\r\n//   } else {\r\n//     onDOMContentLoaded();\r\n//   }\r\n// })();\r\n\r\n(function () {\r\n  let extensionContextInvalidated = false;\r\n\r\n  function autoFillAuthInputs(token) {\r\n    const inputs = document.querySelectorAll('input[type=\"text\"]');\r\n    console.log(\"Found inputs:\", inputs);\r\n\r\n    inputs.forEach((input) => {\r\n      if (input.id.includes(\"auth\")) {\r\n        console.log(\"Pasting token into input with id:\", input.id);\r\n        input.value = token;\r\n\r\n        // Simulate user interaction\r\n        input.focus();\r\n        const inputEvent = new Event(\"input\", { bubbles: true });\r\n        input.dispatchEvent(inputEvent);\r\n\r\n        const changeEvent = new Event(\"change\", { bubbles: true });\r\n        input.dispatchEvent(changeEvent);\r\n\r\n        input.blur();\r\n      }\r\n    });\r\n  }\r\n\r\n  function checkAndFillAuthInputs() {\r\n    chrome.runtime.sendMessage({ type: \"GET_TAB_URL\" }, (response) => {\r\n      const currentTabUrl = response.url;\r\n      if (!currentTabUrl) {\r\n        console.log(\"Current tab URL not found.\");\r\n        return;\r\n      }\r\n      console.log(\"Current tab URL:\", currentTabUrl);\r\n\r\n      chrome.storage.local.get([\"tokens\", \"autofillEnabled\"], (result) => {\r\n        console.log(\"chrome.storage.local content:\", result);\r\n        if (result.autofillEnabled) {\r\n          const tokens = result.tokens || [];\r\n          tokens.forEach((tokenObj) => {\r\n            const savedUrl = tokenObj.url;\r\n            console.log(\"savedUrl: \", savedUrl);\r\n            if (savedUrl == currentTabUrl) {\r\n              console.log(\"condition to fill token met\");\r\n              const otp = tokenObj.otp; // Use the stored OTP\r\n              autoFillAuthInputs(otp);\r\n            }\r\n          });\r\n        } else {\r\n          console.log(\"Autofill is disabled.\");\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  function onDOMContentLoaded() {\r\n    try {\r\n      checkAndFillAuthInputs();\r\n\r\n      const intervalId = setInterval(() => {\r\n        if (extensionContextInvalidated) {\r\n          clearInterval(intervalId);\r\n          return;\r\n        }\r\n        try {\r\n          checkAndFillAuthInputs();\r\n        } catch (error) {\r\n          console.log(\"Error accessing chrome.storage.local:\", error);\r\n          extensionContextInvalidated = true;\r\n          clearInterval(intervalId);\r\n        }\r\n      }, 3000);\r\n\r\n      // Adding storage change listener here\r\n      chrome.storage.onChanged.addListener((changes, namespace) => {\r\n        if (changes.tokens) {\r\n          // Refresh the autofill logic if tokens are updated\r\n          checkAndFillAuthInputs();\r\n          console.log(\r\n            \"Tokens updated in content script:\",\r\n            changes.tokens.newValue\r\n          );\r\n        }\r\n      });\r\n\r\n      window.addEventListener(\"unload\", () => clearInterval(intervalId));\r\n    } catch (error) {\r\n      console.log(\"Error initializing content script:\", error);\r\n    }\r\n  }\r\n\r\n  if (document.readyState === \"loading\") {\r\n    document.addEventListener(\"DOMContentLoaded\", onDOMContentLoaded);\r\n  } else {\r\n    onDOMContentLoaded();\r\n  }\r\n})();\r\n"],"names":[],"sourceRoot":""}